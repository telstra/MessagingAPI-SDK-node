/**
 * Telstra Messaging API
 * The API specification for Telstra Messaging API
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Message model module.
 * @module model/Message
 * @version 1.0.8
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * @alias module:model/Message
     * @param to {String} Just a copy of the number the message is sent to.
     * @param deliveryStatus {String} Gives an indication if the message has been accepted for delivery. The description field contains information on why a message may have been rejected. 
     * @param messageId {String} For an accepted message, ths will be a unique reference that can be used to check the messages status. Please refer to the Delivery Notification section.  Note that `messageId` will be different for each number that the message was sent to. 
     */
    constructor(to, deliveryStatus, messageId) { 
        
        Message.initialize(this, to, deliveryStatus, messageId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, to, deliveryStatus, messageId) { 
        obj['to'] = to;
        obj['deliveryStatus'] = deliveryStatus;
        obj['messageId'] = messageId;
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('deliveryStatus')) {
                obj['deliveryStatus'] = ApiClient.convertToType(data['deliveryStatus'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('messageStatusURL')) {
                obj['messageStatusURL'] = ApiClient.convertToType(data['messageStatusURL'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Just a copy of the number the message is sent to.
 * @member {String} to
 */
Message.prototype['to'] = undefined;

/**
 * Gives an indication if the message has been accepted for delivery. The description field contains information on why a message may have been rejected. 
 * @member {String} deliveryStatus
 */
Message.prototype['deliveryStatus'] = undefined;

/**
 * For an accepted message, ths will be a unique reference that can be used to check the messages status. Please refer to the Delivery Notification section.  Note that `messageId` will be different for each number that the message was sent to. 
 * @member {String} messageId
 */
Message.prototype['messageId'] = undefined;

/**
 * For an accepted message, ths will be the URL that can be used to check the messages status. Please refer to the Delivery Notification section. 
 * @member {String} messageStatusURL
 */
Message.prototype['messageStatusURL'] = undefined;






export default Message;

