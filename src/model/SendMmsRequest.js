/**
 * Telstra Messaging API
 * The API specification for Telstra Messaging API
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MMSContent from './MMSContent';

/**
 * The SendMmsRequest model module.
 * @module model/SendMmsRequest
 * @version 1.0.8
 */
class SendMmsRequest {
    /**
     * Constructs a new <code>SendMmsRequest</code>.
     * @alias module:model/SendMmsRequest
     * @param to {String} This is the destination address. Can be an array of strings if sending to multiple numbers: \"to\":[\"+61412345678\", \"+61418765432\"] 
     * @param mMSContent {Array.<module:model/MMSContent>} An array of content that will be sent in an MMS message. If this array is present it will cause the `body` element to be ignored, and the message will be sent as an MMS. 
     */
    constructor(to, mMSContent) { 
        
        SendMmsRequest.initialize(this, to, mMSContent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, to, mMSContent) { 
        obj['to'] = to;
        obj['MMSContent'] = mMSContent;
    }

    /**
     * Constructs a <code>SendMmsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendMmsRequest} obj Optional instance to populate.
     * @return {module:model/SendMmsRequest} The populated <code>SendMmsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendMmsRequest();

            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('replyRequest')) {
                obj['replyRequest'] = ApiClient.convertToType(data['replyRequest'], 'Boolean');
            }
            if (data.hasOwnProperty('notifyURL')) {
                obj['notifyURL'] = ApiClient.convertToType(data['notifyURL'], 'String');
            }
            if (data.hasOwnProperty('MMSContent')) {
                obj['MMSContent'] = ApiClient.convertToType(data['MMSContent'], [MMSContent]);
            }
        }
        return obj;
    }


}

/**
 * This is the destination address. Can be an array of strings if sending to multiple numbers: \"to\":[\"+61412345678\", \"+61418765432\"] 
 * @member {String} to
 */
SendMmsRequest.prototype['to'] = undefined;

/**
 * This will be the source address that will be displayed on the receiving device. You can set an Alphanumeric sender ID of up to 11 characters that the MMS was sent from. Phone numbers in the `from` attribute will be blocked (400-error) to prevent number spoofing.  Most standard ASCII characters are accepted in the alphanumeric `from` attribute, however there are some limitations. The following limitations and characters are allowed in the alphanumeric `from` attribute; any alphabetic character (e.g. `abc`), any number mixed with alphabetic characters (e.g. `123abc`), uppercase and lowercase characters (e.g. `aBc`), any of the following special characters mixed with alphabetic characters are allowed; `~!@#$%^&*()~_~+-={}|[];'?,./` (e.g. `abc~!@`), any combination of lowercase, uppercase, numeric or allowed special characters (e.g. `abc@#123DE`). All other characters, including spaces and extended ASCII characters, are not allowed (e.g. `<>:\"\\`).  If attribute is not present, the service will use the mobile number associated with the application (in E.164 format).  If `replyRequest` is set to true, this field should not be present.  This feature is only available on Telstra Account paid plans, not through Free Trials or credit card paid plans.   *Please note:*  *- Alphanumeric sender ID works for domestic, i.e. Australian, destinations only.*  *- When Alphanumeric sender ID is used in sending MMS, Delivery Reports will NOT be returned.* 
 * @member {String} from
 */
SendMmsRequest.prototype['from'] = undefined;

/**
 * The subject that will be used in an MMS message. Subject is limited to maximum of 64 characters.  Some special characters need to be encoded if used in the `subject` field (e.g. &amp;amp; for & and &amp;lt; for <). 
 * @member {String} subject
 */
SendMmsRequest.prototype['subject'] = undefined;

/**
 * If set to true, the reply message functionality will be implemented. The `from` field should not be present. 
 * @member {Boolean} replyRequest
 */
SendMmsRequest.prototype['replyRequest'] = undefined;

/**
 * Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/). 
 * @member {String} notifyURL
 */
SendMmsRequest.prototype['notifyURL'] = undefined;

/**
 * An array of content that will be sent in an MMS message. If this array is present it will cause the `body` element to be ignored, and the message will be sent as an MMS. 
 * @member {Array.<module:model/MMSContent>} MMSContent
 */
SendMmsRequest.prototype['MMSContent'] = undefined;






export default SendMmsRequest;

